
public class MonopolyMain {

	//trade,buy/sell houses, morgage/unmorgage, roll, buy/pay rent for property/financial handling for debt (while inDebt:)
	//iTurn++ (iTurn modular for # of Players, whereas iTurnStep is modular for # of options per player turn)
	//iTurn corresponds with player ID
	
	
	public static void main(String[] args) {
		
		
		Players [] aPlayers = setup.playerSetup();
		Properties [] aBoard = setup.propertiesSetup();
		Turn turn = new Turn(aPlayers.length);
		boolean bDone = false;
		while(!bDone){
			
			//Rolls dice + appropriate response to roll
			boolean bDoubles = false;
			int iDoublesCount = 0;
			do{
				int [] aRoll = Randoms.RandomDice();
				if(aRoll[0]==aRoll[1]){
				bDoubles = true;
				iDoublesCount++;
				}
				if(iDoublesCount == 3){
					aPlayers[turn.getTurn()].setBoardPosition(30);
					break;
				}
				if(aPlayers[turn.getTurn()].getJailStatus()){
					if(bDoubles){
						aPlayers[turn.getTurn()].toggleJail();
					}
					else{
						aPlayers[turn.getTurn()].turnInJail();
					}
				}
				else{
				aPlayers[turn.getTurn()].moveForward(aRoll[2]);
				}
			}while(bDoubles);
			turn.incrementTurnStep();
			
			//Checks for ownership of what they landed on
			aPlayers[turn.getTurn()].getBoardPosition();
			boolean bOwned = false;
			//Possibly an issue, but probably fine, if I don't give it an initial value, 
			//later it says that it may not have been initialized
			int iOwnerID = 0;
			for(int i = 0; i < aPlayers.length; i ++){
				int [] aPropsOwned = aPlayers[i].getOwnedProperties();
				for(int j = 0; j < aPlayers.length; j++){
					if(aPropsOwned[j] == aPlayers[turn.getTurn()].getBoardPosition()){
						bOwned = true;
						iOwnerID = i;
					}
				}
			}
			if(bOwned){
				//if not owned by player{
					//GET REAL AMOUNT
					int amount = 100;
					turn.transferMoney(amount, turn.getTurn(), iOwnerID, aPlayers);
				//}
			}
			else{
				System.out.println("Would you like to buy this property?");
				//do methods for that
			}
			turn.incrementTurnStep();
			
			
		}
		
		
	}

}
